/* make image responsive 
img {
    width: 100%;
}
but we want more control, so make img into a class

mobile first css
margin - add some white space 
what is an em unit? = allows you to scale things. em unit is a relative unit
when dealing with margin and padding, want to use em units
if poppins isnt avaiable, sans-serif is backup
*/

body {
    margin: 1.5em;
    font-size: 18px;
    font-family: 'Poppins', sans-serif;
}
/* a, all links, text-decoration we can use to get rid of underlines */
a {
    text-decoration: none;
    font-size: 1.3rem;
}
/* put period for class 
top, right, left, bottom can be used for position with absolute
../ get out of our folder but putting 2 periods and forward slash, then into images folder
vh = viewport height
z-index will make these fall on top of or behind other elments, can only use with position absolute
*/
.centralpark-img {
    position: absolute;
    top: 0;
    left: 0;
    background: url('../images/centralparksnow.jpeg');
    background-size: cover;
    width: 100%;
    height: 100vh;
    z-index: -1;
    //forwards bc we only want it to run once
    animation: introLoad 2s forwards;
    //overflow: hidden;
}

.logo {
    color: white;
    font-weight: bold;
}

nav {
    position: fixed;
    right: 0;
    top: 0;
    background: white;
    height: 100vh;
    width: 50%;
    z-index: 999;
    text-transform: uppercase;
    // use transform to hide it
    transform: translateX(100%);
    transition: transform .5s ease-in-out;

    ul {
        // get rid of black circles
        list-style-type: none;
        // pushes words all the way to the left
        padding: 0;
        margin-top: 8em;

        a {
            color: black;
            padding: .75em 2em;
            display: block;
            
            //add hover state
            &:hover {
                background: rgb(228, 221, 221);
            }
        }
    }
    // move the X to right side
    .close {
        float: right;
        margin: 2em;
        width: 2.5em;
    }
}

header {
    // make them next to each other with display flex
    display: flex;
    justify-content: space-between;
    // this means anything inside svg will only apply to them
    svg {
        width: 2.3em;
        margin-top: -.6em;
        cursor: pointer;
    }
}

h1 {
    font-size: 3rem;
    margin-top: 2em;
    line-height: 3.3rem;
}

.subhead {
    font-size: 1.4rem;
}

section.centralpark {
    color: white;
    height: 90vh;
    //forwards - only want it to happen once
    animation: moveDown 1s ease-in-out forwards;
    opacity: 0;

    .down-arrow {
        stroke: white;
        position: absolute;
        bottom: 2em;
        //scale down
        width: 1em;
        // alternate reverse - go back and forth
        animation: moveArrow 1s alternate-reverse infinite;

        path {
            fill: white;
        }
    }
}

.more-info {

    img {
        width: 100%;
        object-fit: cover;
        height: 11em;
    }

    .title {
        font-weight: bold;
        font-size: 1.25rem;
    }
    .desc {
        line-height: 1.5rem;
    }
}

.open-nav {
    transform: translateX(0%);
}

@media only screen and (min-width: 680px) {

    body {
        margin: 1.5em 5em;
        font-family: 'Poppins', sans-serif;
    }

}

@media only screen and (min-width: 680px) {
    //basically ruleset means once we get to 680px, only the rulesets defined in here are going to count
    // if wanted to desktop first it would be (max-width: )
    body {
        margin: 1.5em 5em;
        font-family: 'Poppins', sans-serif;
    }

}

@media only screen and (min-width: 920px) {
    // hide menu when its 920px
    .menu {
        display: none;
    }

    nav {
        transform: translateX(0);
        position: unset;
        display: block;
        width: auto;
        height: auto;
        background: none;

        // can remove X button on desktop
        svg.close {
            display: none;
        }

        ul {
            // any child nested inside of parent element with flex will become columns
            display: flex;
            margin: 0;

            a {
                color: white;
                padding: 0.5em 1.5em;
                font-size: .9rem;

                &:hover {
                    background: none;
                    text-decoration: underline;
                }
            }
        }
    }

    .centralpark-img {
        // make picture 50% in desktop
        left: unset;
        right: 0;
        width: 50%;
        height: 42em;
    }

    .logo {
        color: black;

        span {
            color: red;
        }
    }

    section.centralpark {
        color: black;
        height: auto;
        width: 40%;
        margin-bottom: 20em;

        svg.down-arrow {
            stroke: black;
            position: unset;

            path {
                fill: black;
            }
        }
    }

    .feature {
        display: grid;
        grid-template-columns: repeat(2, auto);
        gap: 3em;
        margin-bottom: 8em;

        img {
            width: 25em;
        }

        .content {
            text-align: right;
            width: 25em;
        }
    }

    .feature.left {
        grid-template-areas: "left right";

        img {
            grid-area: left;
        }

        .content {
            text-align: left;
            width: 25em;
            justify-self: left;
        }
    }

}

@media only screen and (min-width: 1200px) {
    .wrapper {
        width: 1200px;
        margin: 0 auto;
    }

    .feature {
        gap: 0;
    }
}

@keyframes introLoad {
    //create animation for main pic
    from {
        // css clippy
        clip-path: polygon(50% 0%, 80% 10%, 100% 35%, 100% 70%, 80% 90%, 50% 100%, 20% 90%, 0% 70%, 0% 35%, 20% 10%);
    }
    to {
        clip-path: polygon(50% 0%, 100% 0, 100% 35%, 100% 70%, 100% 96%, 100% 100%, 0 100%, 0% 70%, 0% 35%, 0 0);

    } 
}
@keyframes moveArrow {
    //create animation for main pic
    from {
        transform: translateY(-30px);
    }
    to {
        transform: translateY(0);

    } 
}
@keyframes moveDown {
    //create animation for main pic
    from {
        transform: translateY(-100px);
    }
    to {
        transform: translateY(0);
        opacity: 1;

    } 
}